.define KEYBOARD_INTERRUPT 0x4801
.define MODEM_INTERRUPT    0x1804

SET PC, initialisation

.include inc/hardware_detection
.include inc/display

;;; Initialisation ;;;

:initialisation
  JSR hardware_detection

  ; map display to memory 0x8000 - 0x8180
  JSR display_init

  ; enable keyboard interrupts
  SET A, 3
  SET B, KEYBOARD_INTERRUPT
  HWI [keyboard_port]

  ; tell modem to send and receive on 0x10
  SET A, 2
  SET B, 0x10
  HWI [modem_port]

  SET A, 3
  SET B, 0x10
  HWI [modem_port]

  ; enable modem interrupts
  SET A, 6
  SET B, MODEM_INTERRUPT
  HWI [modem_port]

  ; setup interrupts
  IAS interrupt_handler

:main_loop
  ; clear input line of screen
  SET Y, 11
  SET B, 0xFF00
  JSR render_clear_line

  SUB PC, 1

;;; Interrupt handling

:interrupt_handler
  IFE A, KEYBOARD_INTERRUPT
  JSR read_keyboard

  IFE A, MODEM_INTERRUPT
  JSR read_modem

  ; disable interrupts and return
  RFI 0

:read_keyboard

  ; read character read into C
  SET A, 1
  HWI [keyboard_port]

  ; add to buffer if ASCII
  IFG C, 0x1F
  IFL C, 0x7f
  SET PC, add_to_buffer

  ; transmit on enter
  IFE C, 0x11
  SET PC, transmit

  ; delete on backspace
  IFE C, 0x10
  SET PC, delete

  ; otherwise ignore it
  ; return to IA handler
  SET PC, POP

:add_to_buffer
  ; ignore if this will cause an overflow (> 32 chars)
  SET X, [message_buffer_index]
  IFG X, 31
  SET PC, POP

  SET A, message_buffer
  ADD A, X
  SET [A], C

  ; render to screen
  SET Y, 11
  SET B, 0x0F00
  JSR render_char_xy

  ; increment buffer index
  ADD X, 1
  SET [message_buffer_index], X

  ; return to IA handler
  SET PC, POP

:delete
  ; decrement buffer index
  SET X, [message_buffer_index]
  SUB X, 1

  ; clear screen
  SET Y, 11
  SET B, 0x0F00
  SET C, 0x20
  JSR render_char_xy

  ; save buffer index
  SET [message_buffer_index], X

  ; return to IA handler
  SET PC, POP

:transmit
  ; add terminator
  SET A, [message_buffer_index]
  ADD A, message_buffer
  SET [A], 0x0

  ; send to modem
  SET A, 4
  SET B, [message_buffer_index]
  ADD B, 1
  SET C, message_buffer
  HWI [modem_port]

  ; clear input line of screen
  SET Y, 11
  SET B, 0xFF00
  JSR render_clear_line

  ; reset buffer
  SET [message_buffer_index], 0

  ; return to IA handler
  SET PC, POP

:read_modem
  SET A, 5
  SET C, modem_buffer
  HWI [modem_port]

  ; clear line
  SET Y, [line]
  SET B, 0xF000
  JSR render_clear_line

  ; print to screen
  SET I, modem_buffer
  SET B, 0xF000
  SET X, 0

:read_loop
  ; check for terminator
  SET C, [I]
  IFE C, 0x0
  SET PC, read_end_loop

  ; otherwise render
  JSR render_char_xy

  ADD X, 1
  ADD I, 1
  SET PC, read_loop

:read_end_loop
  ; increment line number
  ADD Y, 1
  IFE Y, 11
  SET Y, 0
  SET [line], Y

  ; return to IA handler
  SET PC, POP

:message_buffer_index
  DAT 0

:line
  DAT 0

:message_buffer
  DAT "                                  "

:modem_buffer
  DAT "                                  "
